(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[894],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return p}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),c=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),h=c(n),p=r,f=h["".concat(u,".").concat(p)]||h[p]||d[p]||a;return n?o.createElement(f,i(i({ref:t},s),{},{components:n})):o.createElement(f,i({ref:t},s))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8092:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var o=n(2122),r=n(9756),a=(n(7294),n(3905)),i=["components"],l={title:"Tutorial 2: Social login with OpenID Connect",description:"Identity federation with AuthGuard and and OpenID Connect provider",slug:"tutorial-oidc",tags:["tutorial"],hide_table_of_contents:!1},u={permalink:"/blog/tutorial-oidc",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2021-12-03-oidc-federation.md",source:"@site/blog/2021-12-03-oidc-federation.md",title:"Tutorial 2: Social login with OpenID Connect",description:"Identity federation with AuthGuard and and OpenID Connect provider",date:"2021-12-03T00:00:00.000Z",formattedDate:"December 3, 2021",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:3.3,truncated:!0,nextItem:{title:"Tutorial 2: Federation with LDAP",permalink:"/blog/tutorial-ldap"}},c=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"OpenID Connect",id:"openid-connect",children:[]},{value:"Scenario",id:"scenario",children:[]},{value:"Test Setup",id:"test-setup",children:[]},{value:"AuthGuard Configuration",id:"authguard-configuration",children:[]},{value:"Social Login",id:"social-login",children:[{value:"Authorization URL",id:"authorization-url",children:[]},{value:"Exchange the Authorization Code",id:"exchange-the-authorization-code",children:[]}]}],s={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In a previous tutorial we showed how AuthGuard can be used\nalongside an LDAP server for identity federation. In this\nexample, we will achieve something similar but with an OpenID\nConnect instead."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Also applies to any OAuth 2.0 provider")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In this tutorial we will focus on OpenID Connect providers\nbut the same steps still apply to a regular OAuth 2.0 providers.\nThe only difference will be the inclusion of an ID token."))),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"A standard AuthGuard distribution or a custom distribution\nwith the JWT extension.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Follow the guideline for the ",(0,a.kt)("a",{parentName:"p",href:"/docs/setup"},"server setup"),"."))),(0,a.kt)("h2",{id:"openid-connect"},"OpenID Connect"),(0,a.kt)("p",null,"OpenID Connect is, in summary, an addition to regular OAuth 2.0\nwhere the identity provider also provies and ID token which\ncarries information about the user. "),(0,a.kt)("h2",{id:"scenario"},"Scenario"),(0,a.kt)("p",null,"Our scenario will follow a regular Authorization Code flow and\nit goes as follows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Your client will make a request to AuthGuard to generate an\nauthorization URL for a specific provider."),(0,a.kt)("li",{parentName:"ol"},"Your application should follow the redirect and take the user\nto the authorization page of the identity provider. "),(0,a.kt)("li",{parentName:"ol"},"Once the user approves the authentication, they will be\nredirected back to your application or website."),(0,a.kt)("li",{parentName:"ol"},"Ask AuthGuard to verify the state and exchange the authorization\ncode with access and (optionally) ID tokens."),(0,a.kt)("li",{parentName:"ol"},"AuthGuard will perform those actions and will return the\ntokens generated by the provider, as well as the account ID\nof the corresponding AuthGuard account if configured to do\nso.")),(0,a.kt)("h2",{id:"test-setup"},"Test Setup"),(0,a.kt)("p",null,"For this tutorial you will need to set up an OAuth client with\nan identity provider. For example, Google."),(0,a.kt)("h2",{id:"authguard-configuration"},"AuthGuard Configuration"),(0,a.kt)("p",null,"There are no special exchanges which need to be allowed in order\nfor this to work. The only needed configuration is to add the\nproviders. You can add as many as you want, as long as they unique\nprovider names. For example, the configuration for Google OAuth\nwill look something like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"  oauth:\n    clients:\n      - provider: google\n        clientId: <your client ID>\n        clientSecret: <you client secret>\n        defaultScopes: ['openid', 'profile', 'email']\n        authUrl: https://accounts.google.com/o/oauth2/v2/auth\n        tokenUrl: https://oauth2.googleapis.com/token\n        authRedirectUrl: <your authorization redirect URL>\n        tokenRedirectUrl: <your token redirect URL>\n        accountProvider: true\n        emailField: email\n")),(0,a.kt)("p",null,"Two things to note here:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'The default scopes may differ from provider to the next. Make\nsure that you know which scopes to use. For an OIDC-compliant\nprovider, "openid" and "profile" scopes will be there. We added\n"email" scope since we will be used the user\'s email.'),(0,a.kt)("li",{parentName:"ol"},'If you want AuthGuard to create local accounts for users, then\nyou can set "accountProvider" to true, and then specify which\nfield in the ID token should be used as an email.')),(0,a.kt)("h2",{id:"social-login"},"Social Login"),(0,a.kt)("p",null,"The social login process is broken into two steps: obtaining an\nauthorization URL, then exchanging the authorization code returned\nby the identity server with usable tokens. "),(0,a.kt)("h3",{id:"authorization-url"},"Authorization URL"),(0,a.kt)("p",null,"Obtaining an authorization URL can simply done by making a GET request\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"/oauth/auth_url?provider=<provider>"),'. AuthGuard will return\nback an HTTP response of 302 and the "Location" header will have\nthe URL for that provider. Behind the scenes, AuthGuard will generate\na session and use its token as the state (nonce) token.'),(0,a.kt)("p",null,"After redirecting the user to that login page, they will be\nasked to approve the authorization or not. If it was successful\nthen the identity server will redirect them back to your application\nwith a state, an athorization code."),(0,a.kt)("h3",{id:"exchange-the-authorization-code"},"Exchange the Authorization Code"),(0,a.kt)("p",null,"Now that you have an authorization code and a state token, you can\ncall AuthGuard to perform the exchange and get access, refresh, and\npotentially ID tokens from the identity server. To do so, send a POST\nrequest to ",(0,a.kt)("inlineCode",{parentName:"p"},"/oauth/authorize?provider=<provider>&state=<returned state>&code=<returned code>"),"."),(0,a.kt)("p",null,"If the provider is also configured as an account provider then\nAuthGuard will create a social account for each unique user. The\nsubject of the ID will be used as an external ID to link the two.\nIf an account already exists, then AuthGuard will just retrieve\nthe existing user."))}d.isMDXComponent=!0}}]);