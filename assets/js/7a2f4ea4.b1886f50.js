(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[216],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(t),h=a,f=p["".concat(u,".").concat(h)]||p[h]||d[h]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9432:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],c={sidebar_position:2},u={unversionedId:"extend/exchange",id:"extend/exchange",isDocsHomePage:!1,title:"Exchange Service",description:"As explained in the design section, the exchange service powers the whole authentication part of AuthGuard and any flow built on it. You may need to support a differnt type of token which is not one of the ones already present. You do not need to change anything in AuthGuard's code to support; you can just make it available to it at runtime.",source:"@site/docs/extend/exchange.md",sourceDirName:"extend",slug:"/extend/exchange",permalink:"/docs/extend/exchange",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/extend/exchange.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Extending AuthGuard",permalink:"/docs/extend/extend"},next:{title:"Data Access Layer",permalink:"/docs/extend/dal"}},s=[{value:"Exchanges Internally",id:"exchanges-internally",children:[]},{value:"Defining an Exchange",id:"defining-an-exchange",children:[]}],l={toc:s};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As explained in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/design"},"design section"),", the exchange service powers the whole authentication part of AuthGuard and any flow built on it. You may need to support a differnt type of token which is not one of the ones already present. You do not need to change anything in AuthGuard's code to support; you can just make it available to it at runtime."),(0,o.kt)("h2",{id:"exchanges-internally"},"Exchanges Internally"),(0,o.kt)("p",null,"Before going ahead to implement your own exchange you need to be aware of the interfaces related to it:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AuthProvider")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AuthTokentVerifier")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Exchange"))),(0,o.kt)("p",null,"Every type of tokens, and we agreed that to keep things simple everything is a token, needs something to provide it and something to verify it. Excluding some for example, basic username and password which is not provided but can only be verified."),(0,o.kt)("p",null,"An exchange implementation then essentially uses an ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthTokentVerifier")," to verify a given token and then uses an ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthProvider")," to generate a differnt one, and optionally do something else on the side."),(0,o.kt)("h2",{id:"defining-an-exchange"},"Defining an Exchange"),(0,o.kt)("p",null,"You define an exchange by implementing the ",(0,o.kt)("inlineCode",{parentName:"p"},"Exchange")," interface. Then to make the exchange service know what this exchange is for, you need to annotate it with ",(0,o.kt)("inlineCode",{parentName:"p"},"@TokenExchange"),". For example, one of the pre-defined exchanges in AuthGuard is one which takes a basic token and generates and authorization code for OAuth use."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@TokenExchange(from = "basic", to = "authorizationCode")\npublic class BasicToAuthorizationCode implements Exchange {\n    private final BasicAuth basicAuth;\n    private final AuthorizationCodeProvider authorizationCodeProvider;\n\n    @Inject\n    public BasicToAuthorizationCode(final BasicAuth basicAuth,\n                                    final AuthorizationCodeProvider authorizationCodeProvider) {\n        this.basicAuth = basicAuth;\n        this.authorizationCodeProvider = authorizationCodeProvider;\n    }\n\n    @Override\n    public Optional<TokensBO> exchangeToken(final String basic) {\n        return basicAuth.authenticateAndGetAccount(basic)\n                .map(authorizationCodeProvider::generateToken);\n    }\n}\n')))}d.isMDXComponent=!0}}]);