(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[950],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9517:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:3},c={unversionedId:"extend/dal",id:"extend/dal",isDocsHomePage:!1,title:"Data Access Layer",description:"The data access layer extension is the only required extension in order for AuthGuard to run. The",source:"@site/docs/extend/dal.md",sourceDirName:"extend",slug:"/extend/dal",permalink:"/docs/extend/dal",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/extend/dal.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Exchange Service",permalink:"/docs/extend/exchange"},next:{title:"Event Subscribers",permalink:"/docs/extend/messaging"}},l=[{value:"Data Access Interfaces",id:"data-access-interfaces",children:[{value:"Persistence Repositories",id:"persistence-repositories",children:[]},{value:"Cache Repositories",id:"cache-repositories",children:[]}]},{value:"Example",id:"example",children:[]},{value:"Implementation Guidelines",id:"implementation-guidelines",children:[{value:"Indices",id:"indices",children:[]}]}],u={toc:l};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The data access layer extension is the only required extension in order for AuthGuard to run. The\nothers are optional. AuthGuard was designed with adaptability in mind, which is why it does not come\nwith any database drivers with it. You are expected to have the implementation which connects it to\nwhatever database you want to use."),(0,a.kt)("h2",{id:"data-access-interfaces"},"Data Access Interfaces"),(0,a.kt)("p",null,"The data access layer is split into two parts: persistence, and cache. This allows you to have a\ndifferent implementation for each one, e.g. MySQL for persistence and Redis for caching."),(0,a.kt)("h3",{id:"persistence-repositories"},"Persistence Repositories"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Accounts"),(0,a.kt)("li",{parentName:"ul"},"CredentialsAudit"),(0,a.kt)("li",{parentName:"ul"},"Permissions"),(0,a.kt)("li",{parentName:"ul"},"Credentials"),(0,a.kt)("li",{parentName:"ul"},"Roles"),(0,a.kt)("li",{parentName:"ul"},"ApiKeys"),(0,a.kt)("li",{parentName:"ul"},"Applications"),(0,a.kt)("li",{parentName:"ul"},"ExchangeAttempts"),(0,a.kt)("li",{parentName:"ul"},"IdempotentRecord")),(0,a.kt)("h3",{id:"cache-repositories"},"Cache Repositories"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OTP"),(0,a.kt)("li",{parentName:"ul"},"AccountTokens"),(0,a.kt)("li",{parentName:"ul"},"Sessions"),(0,a.kt)("li",{parentName:"ul"},"AccountLocks")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"An example implementation which is used for the test distribution is an in-memory store."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Singleton\npublic class MockAccountsTokensRepository extends AbstractRepository<AccountTokenDO> implements AccountTokensRepository {\n\n    @Override\n    public CompletableFuture<Optional<AccountTokenDO>> getByToken(final String token) {\n        return CompletableFuture.supplyAsync(() -> getRepo().values().stream()\n                .filter(accountToken -> accountToken.getToken().equals(token))\n                .findFirst());\n    }\n}\n")),(0,a.kt)("h2",{id:"implementation-guidelines"},"Implementation Guidelines"),(0,a.kt)("p",null,"There are no special guidelines for implementing data access interfaces, except for accounts\nand credentials. It is the responsibility of the implementation to either check for duplicates\nbefore inserting/updating a document, or rely on a unqiue index of the database to do so. In\ncase of duplicates, the implementation should throw ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceConflictException"),"."),(0,a.kt)("h3",{id:"indices"},"Indices"),(0,a.kt)("p",null,"It is up to the implementation to decide if it wants to create database indices, or rely on\nthem being created in some other way. If the implementation needs to create its own indices\nthen it can do so by creating the appropertiate bootstrap steps. Check ",(0,a.kt)("a",{parentName:"p",href:"/docs/extend/bootstrap"},"Bootstrap Steps")," for more details."))}p.isMDXComponent=!0}}]);