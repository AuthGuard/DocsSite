(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[950],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9517:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},c={unversionedId:"extend/dal",id:"extend/dal",isDocsHomePage:!1,title:"Data Access Layer",description:"The data access layer extension is the only required extension in order for AuthGuard to run. The others are optional. AuthGuard was designed with adaptability in mind, which is why it does not come with any database drivers with it. You are expected to have the implementation which connects it to whatever database you want to use.",source:"@site/docs/extend/dal.md",sourceDirName:"extend",slug:"/extend/dal",permalink:"/docs/extend/dal",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/extend/dal.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Exchange Service",permalink:"/docs/extend/exchange"},next:{title:"Event Subscribers",permalink:"/docs/extend/messaging"}},u=[{value:"Data Access Interfaces",id:"data-access-interfaces",children:[]},{value:"Example",id:"example",children:[]}],l={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The data access layer extension is the only required extension in order for AuthGuard to run. The others are optional. AuthGuard was designed with adaptability in mind, which is why it does not come with any database drivers with it. You are expected to have the implementation which connects it to whatever database you want to use."),(0,o.kt)("h2",{id:"data-access-interfaces"},"Data Access Interfaces"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AccountsRepository.java"),(0,o.kt)("li",{parentName:"ul"},"CredentialsAuditRepository.java"),(0,o.kt)("li",{parentName:"ul"},"PermissionsRepository.java"),(0,o.kt)("li",{parentName:"ul"},"AccountTokensRepository.java"),(0,o.kt)("li",{parentName:"ul"},"CredentialsRepository.java"),(0,o.kt)("li",{parentName:"ul"},"RolesRepository.java"),(0,o.kt)("li",{parentName:"ul"},"ApiKeysRepository.java"),(0,o.kt)("li",{parentName:"ul"},"SessionsRepository.java"),(0,o.kt)("li",{parentName:"ul"},"ApplicationsRepository.java"),(0,o.kt)("li",{parentName:"ul"},"OtpRepository.java")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"An example implementation which is used for the test distribution is an in-memory store."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@Singleton\npublic class MockAccountsTokensRepository extends AbstractRepository<AccountTokenDO> implements AccountTokensRepository {\n\n    @Override\n    public CompletableFuture<Optional<AccountTokenDO>> getByToken(final String token) {\n        return CompletableFuture.supplyAsync(() -> getRepo().values().stream()\n                .filter(accountToken -> accountToken.getToken().equals(token))\n                .findFirst());\n    }\n}\n")))}p.isMDXComponent=!0}}]);