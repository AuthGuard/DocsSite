(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[702],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return p}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=a.createContext({}),l=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,u=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),h=l(t),p=o,m=h["".concat(u,".").concat(p)]||h[p]||d[p]||s;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=h;var r={};for(var u in n)hasOwnProperty.call(n,u)&&(r[u]=n[u]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var l=2;l<s;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4876:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var a=t(2122),o=t(9756),s=(t(7294),t(3905)),i=["components"],r={sidebar_position:8},u={unversionedId:"auth_scenarios",id:"auth_scenarios",isDocsHomePage:!1,title:"Authentication Scenarios",description:"Once you have AuthGuard up and running, and had an API key generated, you",source:"@site/docs/auth_scenarios.md",sourceDirName:".",slug:"/auth_scenarios",permalink:"/docs/auth_scenarios",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/auth_scenarios.md",version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Setup and Usage",permalink:"/docs/setup"},next:{title:"Server Administration",permalink:"/docs/adminstration"}},l=[{value:"Session Authentication",id:"session-authentication",children:[{value:"Configuration",id:"configuration",children:[]},{value:"Requests",id:"requests",children:[]}]},{value:"Token Authentication",id:"token-authentication",children:[{value:"Configuration",id:"configuration-1",children:[]},{value:"Requests",id:"requests-1",children:[]},{value:"Token Encryption",id:"token-encryption",children:[]}]},{value:"One-Time Passwords &amp; Passwordless",id:"one-time-passwords--passwordless",children:[]}],c={toc:l};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Once you have AuthGuard up and running, and had an API key generated, you\ncan now start calling AuthGuard to authenticate users. We have two types\nof user authentication based on what is generate: session-based, and\ntoken-based. We will mention examples for each, and in the end we will\nshow how one-time passwords and passwordless login tie into that."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"AuthGuard is API-only")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Currently, AuthGuard does not provide any user interface, and is purely\njust an API. There is an extension which will take care of that under\ndevelopment."))),(0,s.kt)("h2",{id:"session-authentication"},"Session Authentication"),(0,s.kt)("p",null,"Session-based authentication is a stateful authentication, where the\nauth server generates a session, stores it somewhere, and then give\nthe user back a session ID. We can then get the session information\nfrom the server every time we need to verify the user's session."),(0,s.kt)("p",null,"In order to use session-based authentication with AuthGuard, a session\nstore must be provided. A session store is part of the data access\nlayer cache interfaces, and any cache implementation will have that."),(0,s.kt)("h3",{id:"configuration"},"Configuration"),(0,s.kt)("p",null,"First you need to define some session parameters in the configuration\nas follows"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'sessions:\n    randomSize: 16 # the size of the session ID (session token) in bytes\n    lifeTime: "30m" # how long the session is valid for\n')),(0,s.kt)("p",null,"You must then allow the following exchanges"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'exchange:\n    allowed:\n        - from: "basic"\n          to: "session"\n        - from: "sessionToken"\n          to: "session"\n')),(0,s.kt)("p",null,"The first one will allow you to generate a session for a user using\ntheir identifier (username, email, or phone number) and password.\nWhile the second one will exchange a session token to the session\nassociated with it. Those will only affect the ",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/exchange"),"\nendpoint. You can also add the following configuration to use\n",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/authenticate"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/logout")," endpoints."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'authentication:\n    generateToken: "session"\n    logoutToken: "session"\n')),(0,s.kt)("h3",{id:"requests"},"Requests"),(0,s.kt)("p",null,"To authenticate a user just send a POST request to the authentication endpoint"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"POST /auth/authenticate")," "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "identifier": "{{username}}",\n    "password": "{{password}}"\n}\n')),(0,s.kt)("p",null,"You can add other fields as well such as the user's device ID, user agent,\nand IP address."),(0,s.kt)("p",null,"Then when a user client makes a request to access resources or perform\nactions on them to your server, you can call the exchange endpoint "),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"POST /auth/exchange?from=sessionToken&to=session")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "token": "{{sessionToken}}"\n}\n')),(0,s.kt)("p",null,"To log a user out, i.e. clear their session, you can use ",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/exchange/clear"),"\nor ",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/logout"),". In this example we will use the clear endpoint"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"POST /auth/exchange/clear?tokenType=sessionToken")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "token": "{{sessionToken}}"\n}\n')),(0,s.kt)("h2",{id:"token-authentication"},"Token Authentication"),(0,s.kt)("p",null,"Unlike session-based authentication, token-based authentication is stateless,\nmeaning that your own resource server can verify the token itself without having\nto check with AuthGuard. However, in some cases it may need to, as we will\nsee later. For those stateless tokens, AuthGuard uses JSON Web Token (JWT),\nwhich is the most widely used option."),(0,s.kt)("p",null,"AuthGuard supports two kinds of JWTs: ID tokens, and access tokens. You can\nget both of them as part of an OpenID Connect exchange. "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"ID Tokens"),": Long-lived tokens about the identity of the user. They should\nnot be used to access resources directly, as they do not contain the needed\ninformation for authorization.\n",(0,s.kt)("strong",{parentName:"p"},"Access Tokens"),": Short-lived tokens which can be used to access a resources. "),(0,s.kt)("h3",{id:"configuration-1"},"Configuration"),(0,s.kt)("p",null,"JWT is a bit more complicated than sessions configuration. You need to specify\ngeneral JWT configuration and also specific configuration for each token\ntype individually. Here is an example JWT configuration which uses HMAC256\nto sign the tokens, and does not enable token encryption. For more examples\nyou can check ",(0,s.kt)("a",{parentName:"p",href:"/docs/configuration#jwt"},"the JWT configuration section"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'jwt:\n    algorithm: "HMAC256"\n    privateKey: "keys/hmac256.pem"\n    issuer: "AuthGuard"\n    allowedAlgorithms: ["HMAC256"]\n    trustedIssuers: ["self"]\n')),(0,s.kt)("p",null,"Now let's add some configuration for access tokens and ID tokens"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'accessToken:\n    tokenLife: "5m"\n    refreshTokenLife: "1d"\n    useJti: true\n    includeRoles: true\n\nidToken:\n    tokenLife: "1h"\n    refreshTokenLife: "1d"\n    useJti: true\n')),(0,s.kt)("p",null,"And now we need to add the necessary exchanges, and configure the\nauthentication settings"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'exchange:\n    allowed:\n        - from: "basic"\n          to: "accessToken"\n        - from: "basic"\n          to: "idToken"\n\nauthentication:\n    generateToken: "accessToken"\n    logoutToken: "accessToken"\n')),(0,s.kt)("p",null,"Note that, while we can have multiple exchanges from basic, only\none them can be set to be used by ",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/authenticate")," endpoint.\nThe other ones will only be accessible through ",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/exchange"),"."),(0,s.kt)("h3",{id:"requests-1"},"Requests"),(0,s.kt)("p",null,"Just like authenticating a user to generate a session, you just send a POST\nrequest to the authentication endpoint"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"POST /auth/authenticate")," "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "identifier": "{{username}}",\n    "password": "{{password}}"\n}\n')),(0,s.kt)("p",null,"And just like that, we get an access token back since that is what\nwe specified in the configuration. Your resource servers can now\njust verify the access token themselves by checking the signature."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Use Asymmetric Keys")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If you are planning on verifying the signatures without calling\nAuthGuard then you should use asymmetric keys instead of the\nsymmetric key used in the example above."))),(0,s.kt)("p",null,"To log a user out, you can use ",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/exchange/clear")," or\n",(0,s.kt)("inlineCode",{parentName:"p"},"/auth/logout"),". In this example we will use the clear endpoint"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"POST /auth/exchange/clear?tokenType=accessToken")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "token": "{{refreshToken}}"\n}\n')),(0,s.kt)("p",null,"Note that when we log a user out, we just invalidate their\nrefresh tokens, that way they will not be able to refresh their\ncurrent token without logging in again."),(0,s.kt)("h3",{id:"token-encryption"},"Token Encryption"),(0,s.kt)("p",null,"You can optionally enable token encryption as well. In which case,\nAuthGuard will only return an encrypted token, and then you can\ndecrypt it yourself, or call AuthGuard to do so. Token encryption\nconfiguration example can be found ",(0,s.kt)("a",{parentName:"p",href:"/docs/configuration#jwt"},"here"),"."),(0,s.kt)("h2",{id:"one-time-passwords--passwordless"},"One-Time Passwords & Passwordless"),(0,s.kt)("p",null,'OTPs and Passwordless are considered intermediary steps, or\nextensions to basic authentication. For example, instead of\nhaving "basic to session", you would have "basic to OTP" then\n"OTP to session". In the case of passwordless login, basic is\nperformed without a password.'),(0,s.kt)("p",null,"Those are all defined as exchanges, and are, therefore,\navailable through the exchange endpoint, or can be configured\nto be used through the authenticate endpoint."))}d.isMDXComponent=!0}}]);