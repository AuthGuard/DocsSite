(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[16],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),h=l(n),p=o,f=h["".concat(s,".").concat(p)]||h[p]||d[p]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4398:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return u},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a=["components"],u={sidebar_position:10},s={unversionedId:"federation",id:"federation",isDocsHomePage:!1,title:"Identity Federation",description:"Federation and Social Login/Signup are still experimental",source:"@site/docs/federation.md",sourceDirName:".",slug:"/federation",permalink:"/docs/federation",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/federation.md",version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Server Administration",permalink:"/docs/adminstration"}},l=[{value:"LDAP",id:"ldap",children:[{value:"Configuration",id:"configuration",children:[]},{value:"Exchanges",id:"exchanges",children:[]}]},{value:"Social Login",id:"social-login",children:[{value:"Configuration",id:"configuration-1",children:[]},{value:"Flow",id:"flow",children:[]}]}],c={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,":::warn Experimental Features"),(0,i.kt)("p",null,"Federation and Social Login/Signup are still experimental\nfeatures and may not be ready for production use yet."),(0,i.kt)("p",null,":::"),(0,i.kt)("p",null,"Beside being a full identity managenet service, AuthGuard also\nsupports authentication users which are not managed by it directly.\nAuthGuard is compatible with: any standard LDAP implementation, and\nany OpenID Connect (OIDC) service. OIDC is what most social login\nproviders, such as Google and Facebook, support."),(0,i.kt)("h2",{id:"ldap"},"LDAP"),(0,i.kt)("p",null,"AuthGuard can connect to an LDAP server to authenticate users. In\nsuch scenarios, the LDAP server will be the identity provider,\nwhile AuthGuard will handle only the user tokens or sessions. "),(0,i.kt)("p",null,"Before starting, you need to make sure that the LDAP extension\nis available as part of your distribution. Standard distributions\ndo not include LDAP support, so you will need a custom one. This\nwill change when the LDAP is no longer an experimental feature."),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'ldap:\n    host: .. the server host ..\n    port: .. the server port ..\n    secure: true # should be true for production use\n    admin: # the admin account AuthGuard can use to communicate with the LDAP server\n    adminPassword: # the password of the admin account\n    adminBindFormat: "cn=%s" # the format to use to bind the admin account, %s is a placeholder for the username\n    baseDN: "ou=people,dc=example,dc=com" # the base DN to use to search for users\n    searchAttribut: "uid" # the attribute to get use to search for the username\n    passwordAttribute: "userPassword" # the attribute which has the password\n    bindType: "simple" # the bind type to use (simple, cram_md5, digest_md5, or plain)\n')),(0,i.kt)("h3",{id:"exchanges"},"Exchanges"),(0,i.kt)("p",null,"Just like all other authentication options, LDAP authentication\nis just an exchange. The extension defines the following exchanges:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"LDAP to Access Token"),(0,i.kt)("li",{parentName:"ul"},"LDAP to Authorization Code"),(0,i.kt)("li",{parentName:"ul"},"LDAP to ID Token"),(0,i.kt)("li",{parentName:"ul"},"LDAP to Session"),(0,i.kt)("li",{parentName:"ul"},"LDAP to OTP"),(0,i.kt)("li",{parentName:"ul"},"LDAP to Passwordless")),(0,i.kt)("p",null,"All of them are available through ",(0,i.kt)("inlineCode",{parentName:"p"},"/auth/exchange")," endpoint. You\ncan check the ",(0,i.kt)("a",{parentName:"p",href:"/api"},"OpenAPI documentation")," on how to use it."),(0,i.kt)("h2",{id:"social-login"},"Social Login"),(0,i.kt)("p",null,"Most, if not all, of social login providers support OAuth 2.0 and\nOpenID Connect. AuthGuard does not have a provider-specific\nimplementation, instead you can configure it to connect to any\nof them."),(0,i.kt)("h3",{id:"configuration-1"},"Configuration"),(0,i.kt)("p",null,"As we mentioned, you can configure AuthGuard to use any OpenID\nConnect provider, and you do by defining a client for it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'oauth:\n    clients:\n        - provider: .. the name of the provider, this can be anything to identify it ..\n          authUrl: .. the auth URL of the provider ..\n          tokenUrl: .. the token URL of the provider ..\n          authRedirectUrl: .. the URL to tell the provider to redirect to after the auth step ..\n          tokenRedirectUrl: .. the URL to tell the provider to redirect to after the token step ..\n          clientId: .. the client ID registered with the provider ..\n          clientSecret: .. the client secret registered with the provider ..\n          defaultScopes: ["openid", "profile",..] # the scopes to request from the provder\n')),(0,i.kt)("h3",{id:"flow"},"Flow"),(0,i.kt)("p",null,"There are steps to this flow: 1. get an authorization URL, 2. exchange\nthe authorization code for valid tokens."),(0,i.kt)("p",null,"First you need to request the authorization URL from AuthGuard\nby sending a GET request to ",(0,i.kt)("inlineCode",{parentName:"p"},"/oauth/auth_url")," with the query\nparameter ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," set to one of the providers you defined\nin the configuration. AuthGuard will take care of creating the\nsession state value to be used for interacting with the OAuth\nserver."),(0,i.kt)("p",null,"Once your client gets the URL, it should redirect the user to\nthat URL to perform the authentication. If that step was successful,\nthen the OAuth server will redirect the user back to your application\nwith the authorization code. You then send a POST request to\n",(0,i.kt)("inlineCode",{parentName:"p"},"/oauth/authorize")," with the name of the provider, the state, and\nthe authorization code. AuthGuard will then exchange the code\nfor the tokens from the provider and pass them back to your\napplication."))}d.isMDXComponent=!0}}]);