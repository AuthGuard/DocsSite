(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[3623],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9378:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=n(2122),a=n(9756),s=(n(7294),n(3905)),i=["components"],o={sidebar_position:4},l={unversionedId:"extend/messaging",id:"extend/messaging",isDocsHomePage:!1,title:"Event Subscribers",description:"Another are where AuthGuard can be extended is through its internal messaging layer. Some parts of the system publish events to internal channels through a message bus, and that message bus delivers the events to listeners.",source:"@site/docs/extend/messaging.md",sourceDirName:"extend",slug:"/extend/messaging",permalink:"/docs/extend/messaging",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/extend/messaging.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Data Access Layer",permalink:"/docs/extend/dal"},next:{title:"Bootstrap Steps",permalink:"/docs/extend/bootstrap"}},c=[{value:"Implementing Subscribers",id:"implementing-subscribers",children:[]},{value:"Channels",id:"channels",children:[]}],u={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Another are where AuthGuard can be extended is through its internal messaging layer. Some parts of the system publish events to internal channels through a message bus, and that message bus delivers the events to listeners."),(0,s.kt)("h2",{id:"implementing-subscribers"},"Implementing Subscribers"),(0,s.kt)("p",null,"To add your own subscriber you need to implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageSubscriber")," interface and specify which channels you need that subscriber to listen to using ",(0,s.kt)("inlineCode",{parentName:"p"},"@Channel")," annotation."),(0,s.kt)("p",null,"For example, here is a subscriber which does nothing but log any message it received."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'@Channel("*") // subscribe to all channels\npublic class LogMessagePublisher implements MessageSubscriber {\n    private final static Logger LOG = LoggerFactory.getLogger(LogMessagePublisher.class);\n\n    @Override\n    public void onMessage(final Message message) {\n        LOG.info("Received {}", message);\n    }\n}\n')),(0,s.kt)("h2",{id:"channels"},"Channels"),(0,s.kt)("p",null,"The current list of channels is quite limited, and will be extended in the future. The currently supported channels are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"accounts"),": for all changes related to accounts"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"apps"),": for all changes related to application"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"auth"),": for any authentication attempt"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"otp"),": for any generated OTPs"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"passwordless"),": for any generated passwordless tokens")),(0,s.kt)("p",null,"You may choose to enable only some of these channels, in which case all events pushed to them will be discarded."))}p.isMDXComponent=!0}}]);